<% if (flow) { %>// @flow
<% } %>import * as Immutable from 'immutable';

/**
 * Type of <%= Name %> record that describes default values and shape.
 *
 * @name <%= Name %>Shape
 * @type {Object}
 * @property {string} key - <%= Name %>'s key.
 * @memberof <%= moduleName %>/reducer
 */<% if (flow) { %>
type <%= Name %>Shape = { key: string };<% } %>

const <%= Name %>RecordPrototype = Immutable.Record<% if (flow) { %><<%= Name %>Shape><% } %>(({
  key: '',
}<% if (flow) { %>: <%= Name %>Shape<% } %>));

/**
 * This is the shape and default properties for every instance of <%= Name %>.
 *
 * @property {string} key - The key of <%= Name %>.
 * @memberof <%= moduleName %>/reducer
 */
export class <%= Name %> extends <%= Name %>RecordPrototype<% if (flow) { %><<%= Name %>Shape><% } %> { }

/**
 * Type of <%= Name %>Meta record.
 *
 * Type describes default values and shape for meta info about <%= Name %> instance.
 * @name <%= Name %>MetaShape
 * @type {Object}
 * @property {boolean} loading - Is current instance in process of loading.
 * @property {?number} updatedAt - Time of last entity update if present.
 * @memberof <%= moduleName %>/reducer
 */<% if (flow) { %>
type <%= Name %>MetaShape = {
  loading: boolean,
  saving: boolean,
  updatedAt: number | null,
  savedAt: number | null,
  existed: boolean,
};<% } %>

/**
 * This is the shape and default properties for meta info for every instance of <%= Name %>.
 *
 * @property {boolean} loading - The flag that is used to display that this instance of <%= Name %> is currently loading.
 * @property {?number} updatedAt - The time of last <%= name %>'s info updating.
 * @memberof <%= moduleName %>/reducer
 */
export const <%= Name %>Meta<% if (flow) { %>: Immutable.RecordFactory<<%= Name %>MetaShape><% } %> = Immutable.Record({
  loading: false,
  saving: false,
  updatedAt: 0,
  savedAt: 0,
  existed: false,
});

/**
 * Type of <%= Name %>Model record.
 *
 * Type describes default values and shape for all info (main and meta) about <%= Name %> instance.
 * @name <%= Name %>ModelShape
 * @type {Object}
 * @property {<%= Name %>} data - Main info about entity.
 * @property {<%= Name %>Meta} meta - Meta info about entity.
 * @memberof <%= moduleName %>/reducer
 */<% if (flow) { %>
type <%= Name %>ModelShape = { data: <%= Name %>, meta: <%= Name %>Meta };<% } %>

/**
 * This is the shape and default properties <%= Name %>'s model.
 *
 * @property {<%= Name %>} data - The main <%= name %>'s info.
 * @property {<%= Name %>Meta} meta - Meta info about <%= name %>.
 * @memberof <%= moduleName %>/reducer
 */
export const <%= Name %>Model<% if (flow) { %>: Immutable.RecordFactory<<%= Name %>ModelShape><% } %> = Immutable.Record({
  data: new <%= Name %>(),
  meta: new <%= Name %>Meta(),
});
