import { expect } from 'chai';
import * as Immutable from 'immutable';

import * as ActionType from './<%= Name %>.actionTypes';
import { <%= Name %> } from './<%= Name %>.record';
import { <%= name %>Reducer } from './<%= Name %>.reducer';

describe('<%= [FeatureName.split('/').join('::'), 'Entity'].filter(Boolean).join('::') %>::<%= Name %>::reducer', function() {
  it('is function', function() {
    expect(typeof <%= name %>Reducer).to.be.equal('function');
  });

  it('throws in case of missed action and state', function() {
    expect(<%= name %>Reducer).to.throw(Error);
  });

  it('throws in case of missed action', function() {
    expect(() => <%= name %>Reducer(null)).to.throw(Error);
  });

  it('does not throw in case of existed action and state', function() {
    expect(() => <%= name %>Reducer(null, {})).not.to.throw(Error);
  });

  it('returns the same state as passed in case of unknown action', function() {
    const state = Immutable.fromJS({});

    expect(<%= name %>Reducer(state, { type: 'UNKNOWN' })).to.be.equal(state);
  });

  it('returns immutable state in case of passed state = undefined', function() {
    const state = <%= name %>Reducer(undefined, { type: 'UNKNOWN' });

    expect(Immutable.isImmutable(state)).to.be.equal(true);
  });

  it('returns immutable record in case of passed state = undefined', function() {
    const state = <%= name %>Reducer(undefined, { type: 'UNKNOWN' });

    expect(Immutable.Record.isRecord(state)).to.be.equal(true);
  });

  describe('on LOAD_LIST action', function() {
    it('sets listLoading into true', function() {
      const state = <%= name %>Reducer(undefined, { type: ActionType.LOAD_LIST });

      expect(state.get('listLoading')).to.be.equal(true);
    });
  });

  describe('on LOAD_LIST_SUCCESS action', function() {
    it('sets listLoading into false', function() {
      const state = <%= name %>Reducer(undefined, { type: ActionType.LOAD_LIST_SUCCESS });

      expect(state.get('listLoading')).to.be.equal(false);
    });
  });

  describe('on LOAD_LIST_FAILED action', function() {
    it('sets listLoading into false', function() {
      const state = <%= name %>Reducer(undefined, { type: ActionType.LOAD_LIST_FAILED });

      expect(state.get('listLoading')).to.be.equal(false);
    });
  });

  describe('on SET action', function() {
    let <%= name %>;

    beforeEach(function() {
      <%= name %> = <%= Name %>({ key: '<%= name %>-key' });
    });

    it('sets instance into entities', function() {
      const state = <%= name %>Reducer(undefined, { type: ActionType.SET, payload: { <%= name %>, time: Date.now() } });

      expect(state.getIn(['entities', '<%= name %>-key', 'data'])).to.be.equal(<%= name %>);
    });

    it('sets time into entities', function() {
      const time = Date.now();
      const state = <%= name %>Reducer(undefined, { type: ActionType.SET, payload: { <%= name %>, time } });

      expect(state.getIn(['entities', '<%= name %>-key', 'meta', 'updatedAt'])).to.be.equal(time);
    });

    it('sets key into keys', function() {
      const state = <%= name %>Reducer(undefined, { type: ActionType.SET, payload: { <%= name %>, time: Date.now() } });

      expect(state.get('keys').toArray()).to.includes('<%= name %>-key');
    });

    it('updates time if set existed <%= name %>', function() {
      const time = Date.now() + 1000;
      const preState = <%= name %>Reducer(undefined, { type: ActionType.SET, payload: { <%= name %>, time: Date.now() - 1000 } });
      const state = <%= name %>Reducer(preState, { type: ActionType.SET, payload: { <%= name %>, time } });

      expect(state.getIn(['entities', '<%= name %>-key', 'meta', 'updatedAt'])).to.be.equal(time);
    });

    it('does not add existed key into keys', function() {
      const time = Date.now() + 1000;
      const preState = <%= name %>Reducer(undefined, { type: ActionType.SET, payload: { <%= name %>, time: Date.now() - 1000 } });
      const state = <%= name %>Reducer(preState, { type: ActionType.SET, payload: { <%= name %>, time } });

      expect(state.get('keys').toArray()).to.be.deep.equal(['<%= name %>-key']);
    });
  });

  describe('on SET_LIST action', function() {
    let <%= name %>;
    let another<%= Name %>;

    beforeEach(function() {
      <%= name %> = <%= Name %>({ key: '<%= name %>-key' });
      another<%= Name %> = <%= Name %>({ key: 'another-<%= name %>-key' });
    });

    it('sets instances into entities', function() {
      const state = <%= name %>Reducer(undefined, { type: ActionType.SET_LIST, payload: { <%= name %>List: [<%= name %>, another<%= Name %>], time: Date.now() } });

      expect(state.getIn(['entities', '<%= name %>-key', 'data'])).to.be.equal(<%= name %>);
      expect(state.getIn(['entities', 'another-<%= name %>-key', 'data'])).to.be.equal(another<%= Name %>);
    });

    it('sets times into entities', function() {
      const time = Date.now();
      const state = <%= name %>Reducer(undefined, { type: ActionType.SET_LIST, payload: { <%= name %>List: [<%= name %>, another<%= Name %>], time } });

      expect(state.getIn(['entities', '<%= name %>-key', 'meta', 'updatedAt'])).to.be.equal(time);
      expect(state.getIn(['entities', 'another-<%= name %>-key', 'meta', 'updatedAt'])).to.be.equal(time);
    });

    it('sets keys into keys', function() {
      const state = <%= name %>Reducer(undefined, { type: ActionType.SET_LIST, payload: { <%= name %>List: [<%= name %>, another<%= Name %>], time: Date.now() } });

      expect(state.get('keys').toArray()).to.includes('<%= name %>-key');
      expect(state.get('keys').toArray()).to.includes('another-<%= name %>-key');
    });

    it('updates times if set existed <%= name %>', function() {
      const time = Date.now() + 1000;
      const preState = <%= name %>Reducer(undefined, { type: ActionType.SET_LIST, payload: { <%= name %>List: [<%= name %>, another<%= Name %>], time: Date.now() - 1000 } });
      const state = <%= name %>Reducer(preState, { type: ActionType.SET_LIST, payload: { <%= name %>List: [<%= name %>, another<%= Name %>], time } });

      expect(state.getIn(['entities', '<%= name %>-key', 'meta', 'updatedAt'])).to.be.equal(time);
      expect(state.getIn(['entities', 'another-<%= name %>-key', 'meta', 'updatedAt'])).to.be.equal(time);
    });

    it('does not add existed keys into keys', function() {
      const time = Date.now() + 1000;
      const preState = <%= name %>Reducer(undefined, { type: ActionType.SET_LIST, payload: { <%= name %>List: [<%= name %>, another<%= Name %>], time: Date.now() - 1000 } });
      const state = <%= name %>Reducer(preState, { type: ActionType.SET_LIST, payload: { <%= name %>List: [<%= name %>, another<%= Name %>], time } });

      expect(state.get('keys').toArray()).to.be.deep.equal(['<%= name %>-key', 'another-<%= name %>-key']);
    });
  });
});
