<% if (flow) { %>// @flow
<% } %>import * as ActionType from './<%= Name %>.actionTypes';

/**
 * Action creators to work with <%= Name %>.
 *
 * @module <%= moduleName %>/actions
 */

/**
 * Action for set <%= Name %> record inside the store.
 *
 * @param {Object} $1 - Params for action.
 * @param {<%= Name %>} $1.<%= name %> - Instance of <%= Name %> to set.
 *     This should be a Immutable.Record.
 * @param {number} $1.time - Time that action called.
 *
 * @returns {Object} Action with type SET and `{ <%= name %>, time }` as payload.
 * @memberof <%= moduleName %>/actions
 */
export function set<%= Name %>({ <%= name %>, time }<% if (flow) { %>: { <%= name %>: <%= Name %>, time: number }<% } %>) {
  return {
    type: ActionType.SET,
    payload: {
      <%= name %>,
      time,
    },
  };
}

/**
 * Action for set <%= Name %> record list inside the store.
 *
 * @param {Object} $1 - Params for action.
 * @param {Array<<%= Name %>>} $1.<%= name %>List - Array of instances of <%= Name %> to set.
 *     Every item should be a Immutable.Record.
 * @param {number} $1.time - Time that action called.
 *
 * @returns {Object} Action with type SET_LIST and `{ <%= name %>List, time }` as payload.
 * @memberof <%= moduleName %>/actions
 */
export function set<%= Name %>List({ <%= name %>List, time }<% if (flow) { %>: { <%= name %>List: Array<<%= Name %>>, time: number }<% } %>) {
  return {
    type: ActionType.SET_LIST,
    payload: {
      <%= name %>List,
      time,
    },
  };
}

/**
 * Action for remove <%= Name %> record from the store.
 *
 * @param {Object} $1 - Params for action.
 * @param {<%= Name %>} $1.<%= name %> - Instance of <%= Name %> to remove.
 *     This should be a Immutable.Record.
 *
 * @returns {Object} Action with type REMOVE and `{ <%= name %>, time }` as payload.
 * @memberof <%= moduleName %>/actions
 */
export function remove<%= Name %>({ <%= name %>, time }<% if (flow) { %>: { <%= name %>: <%= Name %>, time: number }<% } %>) {
  return {
    type: ActionType.REMOVE,
    payload: {
      <%= name %>,
      time,
    },
  };
}

/**
 * Action for remove <%= Name %> record list from the store.
 *
 * @param {Object} $1 - Params for action.
 * @param {Array<<%= Name %>>} $1.<%= name %>List - Array of instances of <%= Name %> to remove.
 *     Every item should be a Immutable.Record.
 * @param {number} $1.time - Time that action called.
 *
 * @returns {Object} Action with type SET_LIST and `{ <%= name %>List, time }` as payload.
 * @memberof <%= moduleName %>/actions
 */
export function remove<%= Name %>List({ <%= name %>List, time }<% if (flow) { %>: { <%= name %>List: Array<<%= Name %>>, time: number }<% } %>) {
  return {
    type: ActionType.REMOVE_LIST,
    payload: {
      <%= name %>List,
      time,
    },
  };
}
