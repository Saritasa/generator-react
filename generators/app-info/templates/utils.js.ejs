<% if (flow) { %>// @flow
<% } %>import Ajv from 'ajv';

import { <%= Name %> } from './<%= Name %>.record';
import { <%= Name %>DtoSchema } from './<%= Name %>.schema';
<% if (flow) { %>import { type <%= Name %>Dto } from './<%= Name %>.dto';
<% } %>
/**
 * Utils for working with <% Name %> data.
 *
 * @module <%= moduleName %>/utils
 */

/**
 * Instance of Ajv that allows to create validators.
 *
 * @private
 * @memberof <%= moduleName %>/utils
 */
const ajv = new Ajv({ allErrors: true });

/**
 * Validate <%= Name %>Dto in order to <%= Name %>DtoSchema.
 *
 * @function
 * @param {*} anything - Anything that we should check.
 * @returns {boolean} - `true` if `anything` is valid in order to schema.
 * @memberof <%= moduleName %>/utils
 */
export const validateDto = ajv.compile(<%= Name %>DtoSchema);

/**
 * Gets key from <%= Name %>.
 *
 * @param {<%= Name %>} <%= name %> - Instance of <%= Name %> which key we need.
 * @returns {string} - Key.
 * @memberof <%= moduleName %>/utils
 */
export function get<%= Name %>Key(<%= name %><% if (flow) { %>: <%= Name %><% } %>)<% if (flow) { %>: string<% } %> {
  return String(<%= name %>.get('key'));
}

/**
 * Transforms record into DTO.
 *
 * @param {<%= Name %>} <%= name %> - Instance of <%= Name %> to transform.
 * @returns {<%= Name %>Dto} - DTO.
 * @memberof <%= moduleName %>/utils
 */
export function recordToDto(<%= name %><% if (flow) { %>: <%= Name %><% } %>)<% if (flow) { %>: <%= Name %>Dto<% } %> {
  return { id: <%= name %>.get('key') };
}

/**
 * Transforms DTO into record.
 *
 * Checks if <%= name %>Dto is valid in order to <%= Name %>DtoSchema.
 * If is not valid, throw an Error (in async mode).
 *
 * @param {<%= Name %>Dto} <%= name %>Dto - DTO.
 * @returns {<%= Name %>} - Instance of <%= Name %>.
 * @memberof <%= moduleName %>/utils
 */
export function dtoToRecord(<%= name %>Dto<% if (flow) { %>: <%= Name %>Dto<% } %>)<% if (flow) { %>: <%= Name %><% } %> {
  // ignore else statement, cause testing always run with NODE_ENV=test
  /* istanbul ignore else */
  if (process.env.NODE_ENV !== 'production') {
    if (!validateDto(<%= name %>Dto)) {
      const { errors } = validateDto;
      const error = new Error(`Unexpected data on transform DTO into <%= Name %>.
Got: ${JSON.stringify(<%= name %>Dto)}.
Errors: ${errors.map(({ message, dataPath }) => `${dataPath}: ${message}`).join('\n')}`);

      setTimeout(() => {
        throw error;
      });
    }
  }

  return new <%= Name %>({ key: <%= name %>Dto.id });
}

/**
 * Transforms query from app's format into api's format.
 *
 * @param {*} <%= name %>Query - Query from application.
 * @returns {*} - Transformed query.
 * @memberof <%= moduleName %>/utils
 */
export function listQueryToListQueryDto(<%= name %>Query<% if (flow) { %>: *<% } %>) {
  return <%= name %>Query;
}
